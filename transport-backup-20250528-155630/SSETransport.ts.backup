import { Transport } from "@modelcontextprotocol/sdk/shared/transport.js";
import { JSONRPCMessage, JSONRPCResponse } from "@modelcontextprotocol/sdk/types.js";

export interface SSETransportOptions {
  url: string;
  serverName: string;
  reconnectDelay?: number;
  timeout?: number;
}

export class SSEClientTransport implements Transport {
  private eventSource: EventSource | null = null;
  private responseHandlers = new Map<string | number, {
    resolve: (response: JSONRPCResponse) => void;
    reject: (error: Error) => void;
    timeout: NodeJS.Timeout;
  }>();
  private isConnected = false;
  
  constructor(private options: SSETransportOptions) {
    this.options.reconnectDelay = options.reconnectDelay || 1000;
    this.options.timeout = options.timeout || 30000;
  }
  
  async start(): Promise<void> {
    const url = new URL(this.options.url);
    url.searchParams.set('server', this.options.serverName);
    
    return new Promise((resolve, reject) => {
      try {
        // For Node.js compatibility
        if (typeof EventSource === 'undefined') {
          // Use fetch-based implementation for Node.js
          this.startWithFetch(url.toString()).then(resolve).catch(reject);
          return;
        }
        
        this.eventSource = new EventSource(url.toString());
        
        const timeout = setTimeout(() => {
          if (!this.isConnected) {
            reject(new Error(`SSE connection timeout for ${this.options.serverName}`));
          }
        }, this.options.timeout);
        
        this.eventSource.onopen = () => {
          clearTimeout(timeout);
          console.log(`✅ SSE connected to ${this.options.serverName}`);
          this.isConnected = true;
          resolve();
        };
        
        this.eventSource.onerror = (error) => {
          console.error(`❌ SSE connection error for ${this.options.serverName}:`, error);
          this.isConnected = false;
          
          if (!this.isConnected) {
            clearTimeout(timeout);
            reject(new Error(`Failed to connect to SSE endpoint: ${url.toString()}`));
          }
        };
        
        this.eventSource.onmessage = (event) => {
          try {
            const message: JSONRPCMessage = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error) {
            console.error('Error parsing SSE message:', error);
          }
        };
        
      } catch (error) {
        reject(error);
      }
    });
  }
  
  async close(): Promise<void> {
    this.isConnected = false;
    
    if (this.eventSource) {
      this.eventSource.close();
      this.eventSource = null;
    }
    
    for (const [id, handler] of this.responseHandlers.entries()) {
      clearTimeout(handler.timeout);
      handler.reject(new Error('Transport closed'));
    }
    this.responseHandlers.clear();
  }
  
  async send(message: JSONRPCMessage): Promise<JSONRPCResponse | void> {
    if (!this.isConnected) {
      throw new Error(`SSE transport not connected for ${this.options.serverName}`);
    }
    
    const sendUrl = this.options.url.replace('/stream', '/send');
    
    try {
      const response = await fetch(sendUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          server: this.options.serverName,
          message
        }),
      });
      
      if (!response.ok) {
        throw new Error(`SSE send failed: ${response.status} ${response.statusText}`);
      }
      
      if ('id' in message && message.id !== undefined) {
        return this.waitForResponse(message.id);
      }
      
    } catch (error) {
      console.error(`Failed to send message via SSE to ${this.options.serverName}:`, error);
      throw error;
    }
  }
  
  private async waitForResponse(id: string | number): Promise<JSONRPCResponse> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        this.responseHandlers.delete(id);
        reject(new Error(`Request timeout for ID: ${id}`));
      }, this.options.timeout);
      
      this.responseHandlers.set(id, {
        resolve,
        reject,
        timeout
      });
    });
  }
  
  private handleMessage(message: JSONRPCMessage): void {
    if ('id' in message && message.id !== undefined) {
      const handler = this.responseHandlers.get(message.id);
      if (handler) {
        clearTimeout(handler.timeout);
        this.responseHandlers.delete(message.id);
        
        if ('error' in message) {
          handler.reject(new Error(message.error?.message || 'Unknown error'));
        } else {
          handler.resolve(message as JSONRPCResponse);
        }
        return;
      }
    }
  }
  
  private async startWithFetch(url: string): Promise<void> {
    // Simplified fetch-based implementation for Node.js
    console.log(`🔄 Using fetch-based SSE for ${this.options.serverName}`);
    this.isConnected = true;
  }
}
